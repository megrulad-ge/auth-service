openapi: 3.0.0
paths:
  /api/v1/profile:
    get:
      operationId: AppController_getProfile
      parameters: []
      responses:
        '200':
          description: ''
      security:
        - bearer: []
  /api/v1/health:
    get:
      operationId: HealthController_getHealth
      parameters: []
      responses:
        '200':
          description: Health check
          content:
            application/json:
              schema:
                type: object
                example:
                  status: alive
                properties:
                  status:
                    type: string
                    example: alive
      tags:
        - Health
  /api/v1/sign/up:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Returns OK when successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Returns BAD_REQUEST when the payload is invalid or malformed.
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 400
                  message:
                    - name should not be empty
                    - name should be string
                  error: Bad Request
                properties:
                  message:
                    type: array
                  statusCode:
                    type: number
                  error:
                    type: string
      tags: &ref_0
        - Authentication
  /api/v1/sign/in:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Returns OK when successful
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Returns BAD_REQUEST when the payload is invalid or malformed.
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 400
                  message:
                    - name should not be empty
                    - name should be string
                  error: Bad Request
                properties:
                  message:
                    type: array
                  statusCode:
                    type: number
                  error:
                    type: string
        '401':
          description: ''
        '422':
          description: Returns 422 when the user is not active
      tags: *ref_0
  /api/v1/sign/out:
    post:
      operationId: AuthController_signOut
      parameters: []
      responses:
        '202':
          description: ''
        '400':
          description: Returns BAD_REQUEST when the payload is invalid or malformed.
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 400
                  message:
                    - name should not be empty
                    - name should be string
                  error: Bad Request
                properties:
                  message:
                    type: array
                  statusCode:
                    type: number
                  error:
                    type: string
      tags: *ref_0
      security:
        - bearer: []
  /api/v1/session/refresh:
    post:
      operationId: SessionController_refresh
      parameters: []
      responses:
        '200':
          description: Returns OK when successful
        '400':
          description: Returns BAD_REQUEST when the payload is invalid or malformed.
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 400
                  message:
                    - name should not be empty
                    - name should be string
                  error: Bad Request
                properties:
                  message:
                    type: array
                  statusCode:
                    type: number
                  error:
                    type: string
        '401':
          description: Returns 401 when token is invalid or expired
      tags: &ref_1
        - Session
      security:
        - bearer: []
  /api/v1/session/extend:
    post:
      operationId: SessionController_extend
      parameters: []
      responses:
        '200':
          description: Returns OK when successful
        '400':
          description: Returns BAD_REQUEST when the payload is invalid or malformed.
          content:
            application/json:
              schema:
                type: object
                example:
                  statusCode: 400
                  message:
                    - name should not be empty
                    - name should be string
                  error: Bad Request
                properties:
                  message:
                    type: array
                  statusCode:
                    type: number
                  error:
                    type: string
        '401':
          description: Returns 401 when refreshToken is invalid or expired
      tags: *ref_1
  /api/v1/client:
    post:
      operationId: ClientController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientDto'
      responses:
        '201':
          description: ''
    get:
      operationId: ClientController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /api/v1/client/{id}:
    get:
      operationId: ClientController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    patch:
      operationId: ClientController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: ClientController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
info:
  title: Auth Service
  description: Authentication service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: Enter JWT auth token
      in: header
  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: john
        password:
          type: string
          description: The password of the user
          example: password
        confirmPassword:
          type: string
          description: The password confirmation of the user
          example: password
      required:
        - username
        - password
        - confirmPassword
    RegisterResponse:
      type: object
      properties:
        uuid:
          type: string
        username:
          type: string
      required:
        - uuid
        - username
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: john
        password:
          type: string
          description: The password of the user
          example: password
      required:
        - username
        - password
    CreateClientDto:
      type: object
      properties: {}
    UpdateClientDto:
      type: object
      properties: {}
